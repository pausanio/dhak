<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Bestand', 'doctrine');

/**
 * BaseBestand
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $archiv_id
 * @property string $bestand_sig
 * @property string $bestandsname
 * @property string $laufzeit
 * @property string $bestand_inhalt
 * @property string $umfang
 * @property string $bem
 * @property string $bestandsgeschichte
 * @property string $sperrvermerk
 * @property string $abg_stelle
 * @property string $rechtsstatus
 * @property integer $status
 * @property Doctrine_Collection $Verzeichnungseinheit
 * 
 * @method integer             getArchivId()             Returns the current record's "archiv_id" value
 * @method string              getBestandSig()           Returns the current record's "bestand_sig" value
 * @method string              getBestandsname()         Returns the current record's "bestandsname" value
 * @method string              getLaufzeit()             Returns the current record's "laufzeit" value
 * @method string              getBestandInhalt()        Returns the current record's "bestand_inhalt" value
 * @method string              getUmfang()               Returns the current record's "umfang" value
 * @method string              getBem()                  Returns the current record's "bem" value
 * @method string              getBestandsgeschichte()   Returns the current record's "bestandsgeschichte" value
 * @method string              getSperrvermerk()         Returns the current record's "sperrvermerk" value
 * @method string              getAbgStelle()            Returns the current record's "abg_stelle" value
 * @method string              getRechtsstatus()         Returns the current record's "rechtsstatus" value
 * @method integer             getStatus()               Returns the current record's "status" value
 * @method Doctrine_Collection getVerzeichnungseinheit() Returns the current record's "Verzeichnungseinheit" collection
 * @method Bestand             setArchivId()             Sets the current record's "archiv_id" value
 * @method Bestand             setBestandSig()           Sets the current record's "bestand_sig" value
 * @method Bestand             setBestandsname()         Sets the current record's "bestandsname" value
 * @method Bestand             setLaufzeit()             Sets the current record's "laufzeit" value
 * @method Bestand             setBestandInhalt()        Sets the current record's "bestand_inhalt" value
 * @method Bestand             setUmfang()               Sets the current record's "umfang" value
 * @method Bestand             setBem()                  Sets the current record's "bem" value
 * @method Bestand             setBestandsgeschichte()   Sets the current record's "bestandsgeschichte" value
 * @method Bestand             setSperrvermerk()         Sets the current record's "sperrvermerk" value
 * @method Bestand             setAbgStelle()            Sets the current record's "abg_stelle" value
 * @method Bestand             setRechtsstatus()         Sets the current record's "rechtsstatus" value
 * @method Bestand             setStatus()               Sets the current record's "status" value
 * @method Bestand             setVerzeichnungseinheit() Sets the current record's "Verzeichnungseinheit" collection
 * 
 * @package    historischesarchivkoeln.de
 * @subpackage model
 * @author     Maik Mettenheimer <mettenheimer@pausanio.de>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseBestand extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('bestand');
        $this->hasColumn('archiv_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('bestand_sig', 'string', 63, array(
             'type' => 'string',
             'notnull' => true,
             'unique' => false,
             'length' => 63,
             ));
        $this->hasColumn('bestandsname', 'string', 512, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 512,
             ));
        $this->hasColumn('laufzeit', 'string', 63, array(
             'type' => 'string',
             'length' => 63,
             ));
        $this->hasColumn('bestand_inhalt', 'string', 4000, array(
             'type' => 'string',
             'length' => 4000,
             ));
        $this->hasColumn('umfang', 'string', 4000, array(
             'type' => 'string',
             'length' => 4000,
             ));
        $this->hasColumn('bem', 'string', 4000, array(
             'type' => 'string',
             'length' => 4000,
             ));
        $this->hasColumn('bestandsgeschichte', 'string', 4000, array(
             'type' => 'string',
             'length' => 4000,
             ));
        $this->hasColumn('sperrvermerk', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('abg_stelle', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('rechtsstatus', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             ));
        $this->hasColumn('status', 'integer', 1, array(
             'type' => 'integer',
             'default' => 1,
             'notnull' => true,
             'length' => 1,
             ));


        $this->index('archivindex', array(
             'fields' => 
             array(
              0 => 'archiv_id',
             ),
             ));
        $this->index('bestandsigindex', array(
             'fields' => 
             array(
              0 => 'bestand_sig',
             ),
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasMany('Verzeichnungseinheit', array(
             'local' => 'bestand_sig',
             'foreign' => 'bestand_sig'));

        $signable0 = new Doctrine_Template_Signable();
        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($signable0);
        $this->actAs($timestampable0);
    }
}