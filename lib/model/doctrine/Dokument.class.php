<?php

/**
 * Dokument
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    historischesarchivkoeln.de
 * @subpackage model
 * @author     Ivo Bathke
 * @author     Maik Mettenheimer
 */
class Dokument extends BaseDokument
{

    const THUMBDIR = 'thumb';
    const MEDIUMDIR = 'medium';
    const ORGDIR = 'org';

    /**
     * Get original image
     */
    public function getOrgImage($userCulture = 'de')
    {
        return $this->resolveImage(Dokument::ORGDIR, $userCulture);
    }

    /**
     * Get medium image
     */
    public function getMediumImage($userCulture = 'de')
    {
        return $this->resolveImage(Dokument::MEDIUMDIR, $userCulture);
    }

    /**
     * Get thumbnail
     */
    public function getThumb($userCulture = 'de')
    {
        return $this->resolveImage(Dokument::THUMBDIR, $userCulture);
    }

    /**
     * Get image dimensions
     */
    public function getImageDimensions($type = 'org')
    {
        $filename = $this->getImageName();
        if (!empty($filename)) {
            if ($this->getUsergenerated()) {
                $oj = Dokument::ORGDIR . '/' . $filename;
            } else {
                $oj = Doctrine_Inflector::urlize($this->bestand_sig) . '/' . Dokument::ORGDIR . '/' . $filename;
            }
            $pathImage = $this->getFilesystemPath() . $oj;
            try {
                $dimensions = getimagesize($pathImage);
                return $dimensions;
            } catch (\Exception $exc) {
                return false;
            }
        }
        return false;
    }

    /**
     * Get filesystem path
     */
    public function getFilesystemPath($userCulture = 'de')
    {
        if ($this->getUsergenerated()) {
            $docPath = sfConfig::get('app_dokument_user_filesystem');
        } else {
            $docPath = sfConfig::get('app_dokument_filesystem');
        }
        return $docPath;
    }

    /**
     * Resolve user image
     *
     * @deprecated
     * @param type $type
     * @param type $userCulture
     * @return type
     */
    protected function resolveUserImage($type = 'thumb', $userCulture = 'de')
    {
        if (file_exists(sfConfig::get('app_dokument_user_filesystem_' . $type) . $this->getFilename())) {
            return sfConfig::get('app_dokument_user_web_' . $type) . $this->getFilename();
        } else {
            if (file_exists(sfConfig::get('app_dokument_user_filesystem') . $this->getFilename())) {
                $image = new sfThumbnail(sfConfig::get('app_dokument_max_width_' . $type), sfConfig::get('app_dokument_max_height_' . $type), true, true, 70);
                $image->loadFile(sfConfig::get('app_dokument_user_filesystem') . $this->getFilename());
                $image->save(sfConfig::get('app_dokument_user_filesystem_' . $type) . $this->getFilename(), 'image/jpeg');
                return sfConfig::get('app_dokument_user_web_' . $type) . $this->getFilename();
            } else {
                return sfConfig::get('app_dokument_placeholder_vorlagetyp') . $this->Vorlagentyp->code . '_' . $userCulture . '.png';
            }
        }
    }

    /**
     * Get image base name
     */
    public function getImageBaseName()
    {
        $file = $this->getFilename();
        if (!empty($file)) {
            return pathinfo($file, PATHINFO_FILENAME);
        }
        return null;
    }

    /**
     * Get image name
     */
    public function getImageName()
    {
        $base = $this->getImageBaseName();
        if (!empty($base)) {
            return $base . '.jpg';
        }
        return null;
    }

    /**
     * Get document path
     */
    public function getDokumentPath()
    {
        if ($this->getUsergenerated()) {
            return sfConfig::get('app_dokument_user_filesystem');
        } else {
            return sfConfig::get('app_dokument_filesystem');
        }
    }

    /**
     * Get PDF path
     */
    public function getPdfPath()
    {
        if ($this->getUsergenerated()) {
            return sfConfig::get('app_dokument_user_pdf');
        } else {
            return sfConfig::get('app_dokument_pdf');
        }
    }

    /**
     * Get web path
     */
    public function getWebPath()
    {
        if ($this->getUsergenerated()) {
            return sfConfig::get('app_dokument_user_web');
        } else {
            return sfConfig::get('app_dokument_web');
        }
    }

    /**
     * Create directory recursive
     */
    protected function mkDirRec($docPath, $webPath)
    {
        $parts = explode('/', $webPath);
        $removefile = array_pop($parts);
        $dir = '';
        if (!is_dir($docPath)) {
            mkdir($docPath);
        }
        foreach ($parts as $part) {
            if (!is_dir($docPath . $dir .= "/$part")) {
                mkdir($docPath . $dir);
            }
        }
    }

    /**
     * Get image creator
     */
    public function getCreator()
    {
        $creatorId = $this->getCreatedBy();
        if (!empty($creatorId)) {
            $C = sfGuardUserTable::getInstance()->findOneById($creatorId);
            return $C;
        }
        return false;
    }

    /**
     * get PDF
     */
    public function getPdf()
    {
        $file = $this->getFilename();
        if (!empty($file)) {
            if ($this->getUsergenerated()) {
                $pdf = sfConfig::get('app_dokument_user_pdf') . $file;
            } else {
                $pdf = sfConfig::get('app_dokument_pdf') . Doctrine_Inflector::urlize($this->bestand_sig) . '/' . $file;
            }
            if (file_exists($pdf)) {
                return $pdf;
            }
        }
        return false;
    }

    /**
     * Get DFG-Viewer link
     */
    public function getDfgViewerLink($tekt_nr, $doc_page = 0)
    {
        if ($this->getUsergenerated() == 0) {
            $route = sfContext::getInstance()->getRouting()->generate('dfgviewer', array('ve_id' => $tekt_nr));
        } else {
            $route = sfContext::getInstance()->getRouting()->generate('dfgviewer_userdocs', array('id' => $tekt_nr));
        }
        return 'http://dfg-viewer.de/show/?set[image]=' . $doc_page . '&set[mets]=' . urlencode('http://www.historischesarchivkoeln.de' . $route);
    }

    /**
     * Get signature slug
     */
    public function getSignaturSlug()
    {
        return str_replace(array('/', ':', "\r", "\t", "\n"), '~', $this->getBestandSig() . '+' . $this->getSignatur() . '+' . substr($this->getTitel(), 0, 50));
    }

    /**
     * Get parent link
     */
    public function getParentLink()
    {
        $v = $this->getVerzeichnungseinheitId();
        if (!empty($v)) {
            $parent = $this->getVerzeichnungseinheit();
            $type = 'verzeichnungseinheit';
        } else {
            $id = $this->getArchivId();
            $parent = Doctrine_Core::getTable('Archiv')->findOneById((int)$id);
            $type = Archiv::getTypeSlug($parent->getType());
        }

        if ($parent) {
            return sfContext::getInstance()->getRouting()->generate('lesesaal', array('type' => $type, 'id' => $parent->getId(), 'slug' => $parent->getSignaturSlug()));
        }
        return sfContext::getInstance()->getRouting()->generate('homepage');
    }

    /**
     * Pre Save
     */
    public function preSave($obj)
    {
        //if we have a VE id get Signatures and update
        //if not clear
        $bestandSig = '';
        $signatur = '';
        $archivID = $this->get('archiv_id');
        if (is_numeric($archivID)) {
            $A = Doctrine_Core::getTable('archiv')->find($archivID);
            if($A){
                $bestandSig = $A->getSignatur();
            }
        }
        $veID = $this->get('verzeichnungseinheit_id');
        if (is_numeric($veID)) {
            $VE = Doctrine_Core::getTable('Verzeichnungseinheit')->find($veID);
            if($VE){
                $signatur = $VE->getSignatur();
                if(empty($bestandSig))$bestandSig = $VE->getBestandSig();
            }
        }
        $this->signatur = $signatur;
        $this->bestand_sig = $bestandSig;
    }

    /**
     * Get my documents for user xy
     */
    public function getMyDokumenteForUser($userId){
        return Doctrine_Core::getTable('MyDokumente')
            ->createQuery()
            ->where('created_by = ?', (int)$userId)
            ->andWhere('dokument_id = ?', (int)$this->getId())
            ->fetchOne();
    }

    /**
     * Resolve image
     *
     * loads image by type
     * if no image there it gets ctreated from orig pdfs
     * default is thumb
     *
     * @param string $type
     * @param string $userCulture
     * @return string
     */
    protected function resolveImage($type = 'thumb', $userCulture = 'de')
    {
        /*
         * check if thumb exists in cache
         * check if date of source newer than in cache
         * if all false
         * generate thumb jpg from pdf
         */
        $file = $this->getFilename();

        if (!empty($file)) {

            switch ($type) {
                case Dokument::ORGDIR :
                    $dir = Dokument::ORGDIR;
                    break;
                case Dokument::MEDIUMDIR :
                    $dir = Dokument::MEDIUMDIR;
                    $width = sfConfig::get('app_dokument_max_width_medium');
                    $height = sfConfig::get('app_dokument_max_height_medium');
                    break;
                default :
                    $dir = Dokument::THUMBDIR;
                    $width = sfConfig::get('app_dokument_max_width_thumb');
                    $height = sfConfig::get('app_dokument_max_height_thumb');
                    break;
            }

            $docPath = $this->getDokumentPath();
            $docWeb = $this->getWebPath();
            $pdfPath = $this->getPdfPath();
            $imageName = $this->getImageName();

            //check if image exists
            $web_image = Doctrine_Inflector::urlize($this->bestand_sig) . '/' . $dir . '/' . $imageName;
            $path_image = $docPath . $web_image;
            //if its user generated we have other source path structure
            if ($this->getUsergenerated()) {
                $oj = Dokument::ORGDIR . '/' . $imageName;
            } else {
                $oj = Doctrine_Inflector::urlize($this->bestand_sig) . '/' . Dokument::ORGDIR . '/' . $imageName;
            }
            $org_jpg_web = $docWeb . $oj;
            $org_jpg = $docPath . $oj;
            if (file_exists($path_image)) {
                return $docWeb . $web_image;
            } elseif (file_exists($org_jpg)) {
                if ($type != Dokument::ORGDIR) {
                    //check if org is there and resize form there
                    $img = new sfImage($org_jpg, 'image/jpg', 'ImageMagick');
                    $img->thumbnail($width, $height);
                    //create folder if not exists
                    $this->mkDirRec($docPath, $web_image);
                    $img->saveAs($path_image, 'image/jpg');
                    if (file_exists($path_image)) {
                        return $docWeb . $web_image;
                    }
                } else {
                    return $org_jpg_web;
                }
            } else {
                //generate thumb jpg from pdf
                //if its user generated we have other source path structure
                if ($this->getUsergenerated()) {
                    $pdf = $pdfPath . $file;
                } else {
                    $pdf = $pdfPath . Doctrine_Inflector::urlize($this->bestand_sig) . '/' . $file;
                }
                if (file_exists($pdf)) {
                    //mkdir
                    //$this->mkDirRec($docPath, $org_jpg_web);
                    $this->mkDirRec($docPath, $oj);
                    exec('gs -sDEVICE=jpeg -dJPEGQ=100 -dGraphicsAlphaBits=4 -dTextAlphaBits=4 -dDOINTERPOLATE -sOutputFile=' . $org_jpg . ' -dSAFER -dBATCH -dNOPAUSE -dFirstPage=1 -dLastPage=1 ' . $pdf, $ch);
                    if (file_exists($org_jpg)) {
                        // create thumbnail
                        if ($type != Dokument::ORGDIR) {
                            //make thumb
                            $img = new sfImage($org_jpg, 'image/jpg', 'ImageMagick');
                            $img->thumbnail($width, $height);
                            $img->saveAs($path_image, 'image/jpg');
                            if (file_exists($path_image)) {
                                return $docWeb . $web_image;
                            }
                        } else {
                            return $org_jpg_web;
                        }
                    } else {
                        //else something went wrong
                        //TODO email log
                    }
                }
            }
        }
        //TODO log
        //no luck? return default image
        return sfConfig::get('app_dokument_placeholder_vorlagetyp') . $this->Vorlagentyp->code . '_' . $userCulture . '.png';
    }

}
